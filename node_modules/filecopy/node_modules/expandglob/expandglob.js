/**
 * Expand multiple glob patterns.
 * @function expandglob
 */

'use strict'

const argx = require('argx')
const glob = require('glob')
const async = require('async')
const co = require('co')
const pkg = require('./package.json')
const arrayreduce = require('arrayreduce')

/** @lends expandglob */
function expandglob (patterns, options) {
  let args = argx(arguments)
  let callback = args.pop('function')
  options = args.pop('object') || {}

  patterns = [].concat(patterns || [])

  return co(function * () {
    return yield new Promise((resolve, reject) =>
      async.concat(patterns, (pattern, callback) => {
        glob(pattern, options, callback)
      }, (err, filenames) => {
        if (callback) {
          console.warn(`[${pkg.name}] Callback is now deprecated. Use promise interface instead.`)
          callback(err, filenames)
        }
        err ? reject(err) : resolve(filenames)
      })
    )
  })
}

expandglob.sync = function (patterns, options) {
  return [].concat(patterns || []).map((pattern) =>
    glob.sync(pattern, options)
  ).reduce(arrayreduce.arrayConcat(), [])
}

module.exports = expandglob
